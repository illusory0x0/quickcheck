package "moonbitlang/quickcheck/internal_shrinking"

import(
  "moonbitlang/core/immut/list"
)

// Values
fn bind[T, U](ShrinkTree[T], (T) -> ShrinkTree[U]) -> ShrinkTree[U]

fn draw[T : Show](ShrinkTree[T], Int) -> @list.T[String]

fn get_value[T](ShrinkTree[T]) -> (T, Iter[ShrinkTree[T]])

fn join[T](ShrinkTree[ShrinkTree[T]]) -> ShrinkTree[T]

fn smap[T, U](ShrinkTree[T], (T) -> U) -> ShrinkTree[U]

// Types and methods
type ShrinkTree[T]
impl ShrinkTree {
  bind[T, U](Self[T], (T) -> Self[U]) -> Self[U]
  draw[T : Show](Self[T], Int) -> @list.T[String]
  from_shinker[T]((T) -> Iter[T], T) -> Self[T]
  from_value[T](T) -> Self[T]
  get_value[T](Self[T]) -> (T, Iter[Self[T]])
  smap[T, U](Self[T], (T) -> U) -> Self[U]
}
impl[T : Show] Show for ShrinkTree[T]

// Type aliases

// Traits

