package moonbitlang/quickcheck/lib/lazy

alias @moonbitlang/core/immut/list as @list

// Values
fn default[X : Default]() -> LazyList[X]

fn from_list[T](@list.T[T]) -> LazyList[T]

fn infinite_stream[X : Monoid](X, X) -> LazyList[X]

fn repeat[T](T) -> LazyList[T]

fn sum[X : Monoid](LazyList[X], init~ : X) -> X

fn to_lazy[T](@list.T[T]) -> LazyList[T]

fn zip_lazy_normal[A, B, C]((A, B) -> C, LazyList[A], @list.T[B]) -> @list.T[C]

fn zip_plus[T]((T, T) -> T, LazyList[T], LazyList[T]) -> LazyList[T]

fn zip_with[A, B, C]((A, B) -> C, LazyList[A], LazyList[B]) -> LazyList[C]

// Types and methods
pub(all) enum LazyList {
  Nil
  Cons(T, LazyRef[LazyList[T]])
}
impl LazyList {
  concat[T](Self[T], Self[T]) -> Self[T]
  drop[T](Self[T], Int) -> Self[T]
  drop_while[T](Self[T], (T) -> Bool) -> Self[T]
  fold_left[T, U](Self[T], (U, T) -> U, init~ : U) -> U
  fold_right[T, U](Self[T], (T, U) -> U, init~ : U) -> U
  head[T](Self[T]) -> T
  index[T](Self[T], Int) -> T
  length[T](Self[T]) -> Int
  map[T, U](Self[T], (T) -> U) -> Self[U]
  op_add[T](Self[T], Self[T]) -> Self[T]
  split_at[T](Self[T], Int) -> (Self[T], Self[T])
  tail[T](Self[T]) -> Self[T]
  tails[T](Self[T]) -> Self[Self[T]]
  take[T](Self[T], Int) -> Self[T]
  take_while[T](Self[T], (T) -> Bool) -> Self[T]
  unfold[T](Self[T], (Self[T]) -> (T, Self[T])?) -> Self[T]
}
impl[T : Show] Show for LazyList[T]

type LazyRef
impl LazyRef {
  force[T](Self[T]) -> T
  from_thunk[T](() -> T) -> Self[T]
  from_value[T](T) -> Self[T]
}

// Type aliases

// Traits
pub(open) trait Monoid {
  op_add(Self, Self) -> Self
}

