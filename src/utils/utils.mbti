package "moonbitlang/quickcheck/utils"

import(
  "moonbitlang/core/immut/list"
)

// Values
fn apply_while_array[T](T, (T) -> T, (T) -> Bool) -> Array[T]

fn apply_while_list[T](T, (T) -> T, (T) -> Bool) -> @list.T[T]

fn const_[T, U](T) -> (U) -> T

fn flip[M, N, Z]((M, N) -> Z) -> (N, M) -> Z

fn fresh_name() -> String

fn id[T](T) -> T

fn pair_function[A, B, C]((A, B) -> C) -> ((A, B)) -> C

fn removes_array[T](Int, Int, Array[T]) -> Array[Array[T]]

fn removes_list[T](Int, Int, @list.T[T]) -> @list.T[@list.T[T]]

// Types and methods

// Type aliases

// Traits

